import "other.ability"

first = ability 
{
	context = 
	{
		{
			/* Here, the controlable variable */
			/* p will be updated by a call of GetPos task */
			position p = GetPos();
			/* isOk is initialized to false */
			bool isOk = false;
			otherability::coolstruct s;
			
			/* Ok, defined in other.ability */
			other::other_type r;
			double test_where;
		} 
		{
			/* Here, the read-only variable */
			double thresold = 2.0;
			int i, j, k;
		} 
		{
			/* Here, the private variable */
			double myPrivatevariable;
			int i; /* oups duplicate variable */
			Module xxx;
		}
	}

	tasks = {}

	export = 
	{
		{
			/* Here, define your own type */
			length = newtype double;
			position = struct { double x;
								double y;
								double z;
							  };
			Module = opaquetype;
		}
		{
			/* Here, define your fonction */
			length distance(position A, position B);
			double square(double);
			bool   isToto(test);
			@genom double genomTagTest(Module, double);
			int less_int(int, int);
		}
		{
			/* Here, define your rule */
			distance_symetry = distance(A, B) |- distance(A,B) == distance(B,A);
			less_false = less(A, A) |- ;
			less_assoc = less(A, B), less(B, C) |- less(A,C);
		}
	}
}

